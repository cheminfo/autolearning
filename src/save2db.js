/**
 * Created by acastillo on 9/11/15.
 */
define(function () {
    //There is any atom to add to the database?
    //options={diaID,diaIDs,catalogID,datasetName,solvent}
    function save2db(annotations, options) {
        var countOk = 0;
        if (annotations.length > 0) {
            //Check in the molecule table. If the molecule has been inserted, return the key.
            qresult = db.select("SELECT * FROM molecule WHERE _moleculeID='" + sdfi.diaID + "'");

            var res = 0;
            var _chemicalID = 0;
            if (qresult == null || qresult.length == 0) {
                var chemical = {fk_userID: 0, repository: options.datasetName};
                //To insert a new entry into the table and returns the autogenerated key if any.
                _chemicalID = db.insert("chemical", chemical);
                qresult = {_moleculeID: options.diaID + "", fk_chemicalID: _chemicalID, file: options.catalogID};
                //We should check for errors here
                res = db.insert("molecule", qresult);
            }
            else {
                qresult = qresult[0];
                res = qresult._moleculeID;
                _chemicalID = qresult.fk_chemicalID;
            }

            var atoms = [];
            var atoms = {};
            for (var j = 0; j < options.diaIDs.length; j++) {
                //console.log(sdfi.diaIDs[j].id);
                var hosesString = ACT.getHoseCodesFromDiaID(options.diaIDs[j].id, 5, {algorithm: 0});


                var atom = {
                    _atomID: options.diaIDs[j].id + "",
                    symbol: options.diaIDs[j].element + "",
                    canonical_number: options.diaIDs[j].atoms[0],
                    hose2: hosesString[1] + "",
                    hose3: hosesString[2] + "",
                    hose4: hosesString[3] + "",
                    hose5: hosesString[4] + "",
                    fk_moleculeID: options.diaID + ""
                };
                //Try to insert it. If it already exist do nothin.
                db.insert("atom", atom);
                atoms[options.diaIDs[j].id + ""] = atom;

            }

            var spectrum = {
                type: "NMR spectrum",
                solvent: options.solvent + "",
                nuc1: "1H",
                fk_chemicalID: _chemicalID,
                file: options.catalogID
            };

            //Have to include solvent and nucleus in the query. For now, It should work.
            qresult = db.select("SELECT * from spectrum WHERE fk_chemicalID=" + _chemicalID + " AND solvent = '" + options.solvent + "' AND nuc1='1H'");
            var _spectrumID = 0;
            if (qresult == null || qresult.length == 0)
                _spectrumID = db.insert("spectrum", spectrum);
            else
                _spectrumID = qresult[0]._spectrumID;

            //I will delete all the assignments for this molecule
            //qresult = db.select("DELETE FROM assignment WHERE fk_spectrumID="+_spectrumID);
            for (var j = 0; j < annotations.length; j++) {
                for (var k = 0; k < annotations[j]._highlight.length; k++) {
                    var atomID = annotations[j]._highlight[k] + "";

                    var ref_atom = atoms[atomID];

                    //console.log("atom "+JSON.stringify(ref_atom));

                    if (ref_atom) {
                        //qresult = db.select("SELECT * from assignment WHERE fk_spectrumID="+_spectrumID+" AND fk_atomID = '"+atomID+"'");

                        //if(qresult==null||qresult.length==0){
                        var assignment = {
                            chemicalShift: (parseFloat(annotations[j].info.stopX) + parseFloat(annotations[j].info.startX)) / 2,
                            multiplicity: "",
                            integration: 1,
                            batchID: options.iteration,
                            repository: options.datasetName,
                            atom_symbol: ref_atom.symbol,
                            hose2: ref_atom.hose2,
                            hose3: ref_atom.hose3,
                            hose4: ref_atom.hose4,
                            hose5: ref_atom.hose5,
                            fk_atomID: atomID,
                            fk_spectrumID: _spectrumID
                        };
                        //console.log(assignment);
                        var asgIndex = db.insert("assignment", assignment);

                        if (asgIndex > 0) {
                            countOk++;
                        }
                    }
                }
            }
        }
        return countOk;
    }

    return save2db;
});